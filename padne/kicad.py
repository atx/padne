
import warnings
# This is to suppress pcbnew deprecation warning. Unfortunately the RPC API
# is not yet cooked enough for us
warnings.simplefilter("ignore", DeprecationWarning)

import enum
import math
import pcbnew
import tempfile
import shapely
import shapely.affinity
import pygerber.gerber.api
import pathlib

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Mapping, Optional

import padne.problem as problem

# This file is responsible for loading KiCad files and converting them to our
# internal representation. The idea is that we:
# 1. Load the KiCad file using the KiCad Python API.
# 2. Render it into Shapely objects.
# 3. This needs to include vertex information that

# Hmm, we need to like pick: either we render everything ourselves (fuck)
# or we use pygerber to extract the mesh from gerber files generated by
# KiCad. This has an issue that stuff like vias are not going to be modeled
# well. But, as a first approximation maybe good?
# We can always implement our own renderer later. Or we can start by patching the
# gerber-generated rendered files
# One of the main issues is that we do not have informations about pad center points
# But we can fairly easily compute them and have a lot of work done for us
# by using the gerber pathway

def nm_to_mm(f: float) -> float:
    return f / 1000000


@dataclass
class StackupItem:

    class Type(enum.Enum):
        DIELECTRIC = "DIELECTRIC"
        COPPER = "COPPER"

    name: str
    thickness: float
    # Beware that this field is in S/mm, not S/m (!!!)
    conductivity: Optional[float] = None

    @property
    def conductance(self):
        return self.thickness * self.conductivity


@dataclass
class Stackup:
    items: list[StackupItem]


DEFAULT_STACKUP = Stackup(
    items=[
        StackupItem(name="F.Cu", thickness=0.035, conductivity=5.95e4),
        StackupItem(name="dielectric 1", thickness=1.51),
        StackupItem(name="B.Cu", thickness=0.035, conductivity=5.95e4),
    ]
)


def extract_stackup_from_kicad_pcb(board: pcbnew.BOARD) -> Stackup:
    # Unfortunately, the Python pcbnew API does not support reading the stackup
    # directly. We need to parse the file manually...
    with open(board.GetFileName(), "r") as f:
        import sexpdata
        sexpr = sexpdata.load(f)

    stackup_items = []

    if sexpr[0] != sexpdata.Symbol("kicad_pcb"):
        raise ValueError("Unknown initial key in the PCB file")
    
    setup = next((item for item in sexpr if isinstance(item, list) and 
                 item and item[0] == sexpdata.Symbol('setup')), None)
    
    if not setup:
        raise ValueError("Could not find setup section in PCB file")
    
    stackup = next((item for item in setup if isinstance(item, list) and 
                   item and item[0] == sexpdata.Symbol('stackup')), None)
    
    if not stackup:
        # TODO: Return verify that the board only has two layers
        # I am not sure if it is possible to have no stackup section and
        # more than two layers. It seems KiCad generates the section
        # on every change in the stackup window...
        return DEFAULT_STACKUP
    
    # Process each layer in the stackup
    for item in stackup:
        if not item[0] == sexpdata.Symbol("layer"):
            continue
        
        layer_name = item[1]
        layer_type = None
        thickness = None
        conductivity = None
        
        # Find properties in the layer definition
        for prop in item:
            if not isinstance(prop, list) or len(prop) < 2:
                continue

            match str(prop[0]):
                case "type":
                    layer_type_str = prop[1].lower()
                    if "copper" in layer_type_str:
                        layer_type = StackupItem.Type.COPPER
                        conductivity = 5.95e4  # S/mm (!!! not S/m)
                    elif any(x in layer_type_str for x in ['core', 'prepreg']):
                        layer_type = StackupItem.Type.DIELECTRIC
                    else:
                        # We do not care just yet. Those are usually silkscreen
                        # and mask layers
                        pass
                case "thickness":
                    thickness = float(prop[1])
                case _:
                    pass

        if not layer_type or thickness is None:
            # Shrug
            continue

        stackup_items.append(StackupItem(
            name=layer_name,
            thickness=thickness,
            conductivity=conductivity
        ))
    
    return Stackup(items=stackup_items)


@dataclass(frozen=True)
class LumpedSpec:
    """
    This is what comes out of the eeschema parser (which does not yet exist)
    """

    class Type(enum.Enum):
        VOLTAGE = "VOLTAGE"
        CURRENT = "CURRENT"
        RESISTANCE = "RESISTANCE"

    @dataclass(frozen=True)
    class Endpoint:
        designator: str
        pad: str

    endpoint_a: Endpoint
    endpoint_b: Endpoint

    # Use the unified lumped type from the problem module.
    type: "LumpedSpec.Type"
    value: float


@dataclass(frozen=True)
class ViaSpec:
    """
    This class contains material parameters for a via.
    """
    point: shapely.geometry.Point
    drill_diameter: float
    layer_names: list[str]

    def compute_resistance(self, length: float) -> float:
        # TODO: This is very temporary solution. Will ultimately need to take
        # into account layer plating thickness etc
        # Resistance of a 1.6mm long via with 1mm diameter
        ref_resistance = 0.00027
        ref_area = math.pi * (0.5) ** 2
        ref_length = 1.6

        area = math.pi * (self.drill_diameter / 2) ** 2
        return ref_resistance * (area / ref_area) * length / ref_length


def extract_via_specs_from_pcb(board: pcbnew.BOARD) -> list[ViaSpec]:
    """
    Extract via specifications from a KiCad PCB.
    
    Args:
        board: The KiCad board object
        
    Returns:
        A list of ViaSpec objects containing information about vias in the PCB
    """
    via_specs = []
    
    # Get the tracks (which include vias)
    for track in board.GetTracks():
        # Check if the track is a via
        if track.Type() != pcbnew.PCB_VIA_T:
            continue
        
        # Cast to a via object
        via = track.Cast()
        
        # Get the via drill diameter (convert from nm to mm)
        drill_diameter = nm_to_mm(via.GetDrillValue())
        
        # Get the layers this via connects
        layer_names = []
        layer_set = via.GetLayerSet()
        
        for layer_id in range(pcbnew.PCB_LAYER_ID_COUNT):
            if layer_set.Contains(layer_id):
                layer_name = board.GetLayerName(layer_id)
                # Only include copper layers
                if "Cu" in layer_name:
                    layer_names.append(layer_name)
        
        # Get the via's position (convert from KiCad internal units - nanometers to mm)
        pos_x = nm_to_mm(via.GetPosition().x)
        pos_y = nm_to_mm(via.GetPosition().y)
        via_point = shapely.geometry.Point(pos_x, pos_y)
        
        # Create a ViaSpec object
        via_spec = ViaSpec(
            point=via_point,
            drill_diameter=drill_diameter,
            layer_names=layer_names
        )
        
        via_specs.append(via_spec)
    
    return via_specs


def extract_tht_pad_specs_from_pcb(board: pcbnew.BOARD) -> list[ViaSpec]:
    """
    Extract through-hole pad specifications from a KiCad PCB.
    
    Args:
        board: The KiCad board object
        
    Returns:
        A list of ViaSpec objects representing through-hole pads in the PCB
    """
    tht_specs = []
    
    # Walk through all footprints on the PCB
    for footprint in board.GetFootprints():
        # For each footprint, examine all pads
        for pad in footprint.Pads():
            # Check if the pad is through-hole type
            if pad.GetAttribute() != pcbnew.PAD_ATTRIB_PTH:
                continue
            # Get the pad position and convert from nm to mm
            pos_x = nm_to_mm(pad.GetPosition().x)
            pos_y = nm_to_mm(pad.GetPosition().y)
            pad_point = shapely.geometry.Point(pos_x, pos_y)
            
            # Get the drill diameter
            # For oval/slot drills, use average of width and height as an approximation
            drill_diameter = nm_to_mm((pad.GetDrillSize().x + pad.GetDrillSize().y) / 2)
            
            # Determine which layers this pad connects
            layer_names = []
            layer_set = pad.GetLayerSet()
            
            for layer_id in range(pcbnew.PCB_LAYER_ID_COUNT):
                if layer_set.Contains(layer_id):
                    layer_name = board.GetLayerName(layer_id)
                    # Only include copper layers
                    if "Cu" in layer_name and board.IsLayerEnabled(layer_id):
                        layer_names.append(layer_name)
            
            # Create a ViaSpec object for this through-hole pad
            tht_spec = ViaSpec(
                point=pad_point,
                drill_diameter=drill_diameter,
                layer_names=layer_names
            )
            
            tht_specs.append(tht_spec)
    
    return tht_specs


@dataclass(frozen=True)
class ParsedDirective:
    key: str
    params: list[str]

    @classmethod
    def from_string(cls, directive: str) -> 'ParsedDirective':
        tokens = directive.split()
        if len(tokens) < 2:
            raise ValueError(f"Directive must have at least 1 token: {directive}")
        if tokens[0] != "!padne":
            raise ValueError(f"Directive must start with '!padne': {directive}")
        return cls(key=tokens[1], params=tokens[2:])


@dataclass(frozen=True)
class Directives:
    # Surface resistivity
    # TODO: Add default value for 1oz copper
    lumpeds: list[LumpedSpec]


def parse_lumped_spec_directive(directive: ParsedDirective) -> LumpedSpec:

    if len(directive.params) != 3:
        raise ValueError(f"Invalid directive format: {directive}")

    try:
        type_enum = LumpedSpec.Type(directive.key)
    except ValueError:
        raise ValueError(f"Unknown directive type: {directive.key}")

    value = parse_value(directive.params[0])
    ep_a = parse_endpoint(directive.params[1])
    ep_b = parse_endpoint(directive.params[2])

    return LumpedSpec(
        endpoint_a=ep_a,
        endpoint_b=ep_b,
        type=type_enum,
        value=value
    )


def process_directives(directives: list[ParsedDirective]) -> Directives:
    lumpeds = []

    for directive in directives:
        match directive.key:
            case "VOLTAGE" | "CURRENT" | "RESISTANCE":
                lumped = parse_lumped_spec_directive(directive)
                lumpeds.append(lumped)
            case _:
                warnings.warn(f"Unknown directive: {directive.key}")

    return Directives(lumpeds=lumpeds)


def parse_value(value_str: str) -> float:
    """
    Parse a value string that may contain a unit suffix.
    For instance, "5V" becomes 5.0 and "1k" becomes 1000.0.
    """
    multiplier = 1.0
    lower_value = value_str.lower()
    if lower_value.endswith('k'):
        multiplier = 1e3
        value_str = value_str[:-1]
    elif lower_value.endswith('v') or lower_value.endswith('a'):
        value_str = value_str[:-1]
    
    return float(value_str) * multiplier


def parse_endpoint(token: str) -> LumpedSpec.Endpoint:
    """
    Parse an endpoint in the format DESIGNATOR.PAD.
    For example, "R1.1" will become Endpoint(designator="R1", pad="1").
    """
    parts = token.split(".")
    if len(parts) != 2:
        raise ValueError(f"Invalid endpoint format: {token}")
    return LumpedSpec.Endpoint(designator=parts[0], pad=parts[1])


def find_associated_files(pro_file_path: pathlib.Path) -> tuple[Path, Path]:
    """
    Given a KiCad project file, return the associated PCB and schematic file paths.
    
    Args:
        pro_file_path: The KiCad project file (*.kicad_pro)
        
    Returns:
        A tuple of (pcb_file_path, sch_file_path)
    """
    base_name = pro_file_path.stem
    pcb_file_path = pro_file_path.parent / f"{base_name}.kicad_pcb"
    sch_file_path = pro_file_path.parent / f"{base_name}.kicad_sch"
    return pcb_file_path, sch_file_path


def extract_directives_from_eeschema(sch_file_path: pathlib.Path) -> list[str]:
    # First load the input schematic file
    with open(sch_file_path, "r") as f:
        import sexpdata
        sexpr = sexpdata.load(f)

    def find_text_elements(sexp_data):
        # Recurse to find all (text ...) elements in the sexp tree
        # This might be overkill, since I think they only live at the
        # top level
        if not isinstance(sexp_data, list):
            return []

        ret = []

        if len(sexp_data) > 0 and sexp_data[0] == sexpdata.Symbol("text"):
            ret.append(sexp_data)

        for item in sexp_data:
            ret.extend(find_text_elements(item))

        return ret

    def extract_content_from_text_element(text_element):
        assert isinstance(text_element, list)
        assert text_element[0] == sexpdata.Symbol("text")
        # This should probably always be the second element
        return text_element[1]

    all_texts = [
        extract_content_from_text_element(text_element)
        for text_element in find_text_elements(sexpr)
    ]

    directives = [
        ParsedDirective.from_string(text)
        for text in all_texts
        if text.startswith("!padne")
    ]

    return directives


@dataclass(frozen=True)
class PlottedGerberLayer:
    name: str
    layer_id: int
    geometry: shapely.geometry.MultiPolygon


def render_gerbers_from_kicad(pcb_file_path: pathlib.Path) -> list[PlottedGerberLayer]:
    """
    Generate Gerber files from a KiCad PCB file and convert them to PlottedGerberLayer objects.
    
    Args:
        pcb_file_path: Path to the KiCad PCB file
        
    Returns:
        List of PlottedGerberLayer objects containing layer geometries
    """
    with tempfile.TemporaryDirectory() as tmpdir:
        board = pcbnew.LoadBoard(str(pcb_file_path))
        
        # Plot gerbers and get paths to generated files
        gerber_layers = plot_board_to_gerbers(board, Path(tmpdir))
        
        # Extract geometry from gerber files
        return extract_layers_from_gerbers(board, gerber_layers)


def plot_board_to_gerbers(board, output_dir: Path) -> dict[int, Path]:
    """
    Plot copper layers of a KiCad board to Gerber files.
    
    Args:
        board: KiCad board object
        output_dir: Directory where Gerber files will be saved
        
    Returns:
        Dictionary mapping layer IDs to paths of generated Gerber files
    """
    # Create plot controller and options
    plot_controller = pcbnew.PLOT_CONTROLLER(board)
    plot_options = plot_controller.GetPlotOptions()
    
    # Configure plot options for Gerber output
    plot_options.SetOutputDirectory(str(output_dir))
    plot_options.SetFormat(pcbnew.PLOT_FORMAT_GERBER)
    plot_options.SetUseGerberAttributes(True)
    plot_options.SetCreateGerberJobFile(False)
    #plot_options.SetExcludeEdgeLayer(False) # TODO: Figure this out
    plot_options.SetUseAuxOrigin(True)
    # TODO: This is a rather important choice - for now, we make no drill
    # shapes and later after we get via sim online, we need to include the drill shape
    # and handle the edge of each hole correctly
    plot_options.SetDrillMarksType(pcbnew.DRILL_MARKS_FULL_DRILL_SHAPE)
    
    # Set up layer list to plot
    gerber_layers = {}
    
    # Plot each copper layer
    for layer_id in range(pcbnew.PCB_LAYER_ID_COUNT):
        # Get layer name first
        layer_name = board.GetLayerName(layer_id)
        # Only process enabled layers that are copper layers (e.g. contain "Cu")
        if not board.IsLayerEnabled(layer_id) or not layer_name.endswith("Cu"):
            continue
        
        # Open plot file
        plot_controller.SetLayer(layer_id)
        plot_controller.OpenPlotfile(layer_name, pcbnew.PLOT_FORMAT_GERBER, "")
        
        # Plot the layer
        assert plot_controller.PlotLayer(), f"Failed to plot layer {layer_name}"

        gerber_path = Path(plot_controller.GetPlotFileName())

        assert gerber_path.exists(), f"Gerber file {gerber_path} does not exist"

        gerber_layers[layer_id] = gerber_path

    # Close the plot
    plot_controller.ClosePlot()
    
    return gerber_layers


def extract_layers_from_gerbers(board, gerber_layers: dict[int, Path]) -> list[PlottedGerberLayer]:
    """
    Extract geometry from Gerber files and create PlottedGerberLayer objects.
    
    Args:
        board: KiCad board object (for layer names)
        gerber_layers: Dictionary mapping layer IDs to paths of Gerber files
        
    Returns:
        List of PlottedGerberLayer objects
    """
    plotted_layers = []
    
    for layer_id, gerber_path in gerber_layers.items():
        # Get layer name from the board
        layer_name = board.GetLayerName(layer_id)

        # Load gerber file and extract geometry
        gerber_data = pygerber.gerber.api.GerberFile.from_file(gerber_path)
        try:
            geometry = gerber_data.render_with_shapely()._result.shape
        except AssertionError:
            # This is a bug in pygerber, which gets triggered if the
            # gerber file is empty. We should fix this in pygerber ideally
            # TODO: Figure out if there is at least a way to check if the
            # gerber file is empty before we try to render it
            continue

        # For reasons to be determined, the geometry generated like this has 
        # a flipped y axis. Flip it back.
        geometry = shapely.affinity.scale(geometry, 1.0, -1.0, origin=(0, 0))
        
        # If the layer has only a single connected component, convert it to a MultiPolygon
        if geometry.geom_type == "Polygon":
            geometry = shapely.geometry.MultiPolygon([geometry])

        # Create a PlottedGerberLayer object
        plotted_layer = PlottedGerberLayer(
            name=layer_name,
            layer_id=layer_id,
            geometry=geometry
        )
        
        plotted_layers.append(plotted_layer)
    
    return plotted_layers


def find_pad_location(board, designator: str, pad: str) -> tuple[str, shapely.geometry.Point]:
    """
    Find the physical location of a pad on the PCB.
    
    Args:
        board: KiCad board object
        designator: Component reference designator (e.g., "R1")
        pad: Pad number or name (e.g., "1")
        
    Returns:
        Tuple of (layer_name, point) where point is the pad's center
        
    Raises:
        ValueError: If the component or pad is not found
    """
    # Find the footprint with the given designator
    for footprint in board.GetFootprints():
        if footprint.GetReference() != designator:
            continue

        # Find the pad with the given number/name
        for pad_obj in footprint.Pads():
            if pad_obj.GetName() != pad:
                continue

            # Get the pad's position (in KiCad internal units, nanometers)
            position = pad_obj.GetPosition()
            
            # Convert from KiCad internal units (nanometers) to mm
            x_mm = nm_to_mm(position.x)
            y_mm = nm_to_mm(position.y)
            point = shapely.geometry.Point(x_mm, y_mm)
            
            # For SMD pads, get the layer directly
            if pad_obj.GetAttribute() == pcbnew.PAD_ATTRIB_SMD:
                layer_id = pad_obj.GetLayer()

                if footprint.IsFlipped():
                    match layer_id:
                        case pcbnew.F_Cu:
                            layer_id = pcbnew.B_Cu
                        case pcbnew.B_Cu:
                            layer_id = pcbnew.F_Cu
                        case _:
                            raise NotImplementedError("Flipped footprints with SMD pads on internal layers are not supported yet")
                    footprint_pos_y = nm_to_mm(footprint.GetPosition().y)
                    y_mm = 2 * footprint_pos_y - y_mm
                    point = shapely.geometry.Point(x_mm, y_mm)

                layer_name = board.GetLayerName(layer_id)
                return layer_name, point

            # Handle through-hole pads
            if pad_obj.GetAttribute() == pcbnew.PAD_ATTRIB_PTH:
                layer_set = pad_obj.GetLayerSet()
                # Find first copper layer in the layer set
                for layer_id in range(pcbnew.PCB_LAYER_ID_COUNT):
                    if not layer_set.Contains(layer_id):
                        continue
                    layer_name = board.GetLayerName(layer_id)
                    if "Cu" not in layer_name:
                        continue
                    # For flipped footprints, adjust the y coordinate similar to SMD pads
                    #if footprint.IsFlipped():
                    #    footprint_pos_y = nm_to_mm(footprint.GetPosition().y)
                    #    y_mm = 2 * footprint_pos_y - y_mm
                    #    point = shapely.geometry.Point(x_mm, y_mm)
                    return layer_name, point
                
                raise ValueError(f"No copper layer found for through-hole pad {pad} on component {designator}")

        raise ValueError(f"Pad {pad} not found on component {designator}")
    
    raise ValueError(f"Component {designator} not found")


def load_kicad_project(pro_file_path: pathlib.Path) -> problem.Problem:
    """
    Load a KiCad project and create a Problem object for PDN simulation.
    
    Args:
        pro_file_path: Path to the KiCad project file (*.kicad_pro)
        
    Returns:
        A Problem object containing layers and lumped elements
    
    Raises:
        FileNotFoundError: If required files are missing
        ValueError: If the project contains invalid data
    """
    # Verify project file exists
    if not pro_file_path.exists():
        raise FileNotFoundError(f"Project file not found: {pro_file_path}")
    
    # Find associated PCB and schematic files
    pcb_file_path, sch_file_path = find_associated_files(pro_file_path)
    
    # Verify required files exist
    if not pcb_file_path.exists():
        raise FileNotFoundError(f"PCB file not found: {pcb_file_path}")
    if not sch_file_path.exists():
        raise FileNotFoundError(f"Schematic file not found: {sch_file_path}")
    
    # Load KiCad board
    board = pcbnew.LoadBoard(str(pcb_file_path))
    
    # Extract layer geometry from PCB file
    plotted_layers = render_gerbers_from_kicad(pcb_file_path)
    stackup = extract_stackup_from_kicad_pcb(board)
    # Verify that every plotted layer is contained within the stackup
    # Do note that the stackup can theoretically contain more copper layers
    # than the ones plotted. This is because empty layers do not get plotted.
    for pl in plotted_layers:
        if not any(pl.name == stackup_item.name for stackup_item in stackup.items):
            raise ValueError(f"Layer {pl.name} not found in stackup")
    
    # Extract directives from schematic
    directives = process_directives(extract_directives_from_eeschema(sch_file_path))
    
    # Create a dictionary mapping layer names to Layer objects
    layer_dict = {}
    for plotted_layer in plotted_layers:
        # Use layer-specific conductance if available, or default
        stackup_layer = next(
            (item for item in stackup.items if item.name == plotted_layer.name)
        )
        conductance = stackup_layer.conductance
        
        layer = problem.Layer(
            shape=plotted_layer.geometry,
            name=plotted_layer.name,
            conductance=conductance
        )
        layer_dict[plotted_layer.name] = layer
    
    # Convert LumpedSpec objects to Lumped objects
    lumpeds = []
    for spec in directives.lumpeds:
        # Find the physical locations of the pads
        a_layer_name, a_point = find_pad_location(
            board, spec.endpoint_a.designator, spec.endpoint_a.pad
        )
        b_layer_name, b_point = find_pad_location(
            board, spec.endpoint_b.designator, spec.endpoint_b.pad
        )
        
        # Get the corresponding Layer objects
        if a_layer_name not in layer_dict:
            raise ValueError(f"Layer {a_layer_name} not found in rendered layers")
        if b_layer_name not in layer_dict:
            raise ValueError(f"Layer {b_layer_name} not found in rendered layers")
        
        a_layer = layer_dict[a_layer_name]
        b_layer = layer_dict[b_layer_name]
        
        # Create Terminal objects
        terminal_a = problem.Terminal(layer=a_layer, point=a_point)
        terminal_b = problem.Terminal(layer=b_layer, point=b_point)

        # Create the specific lumped element subclass instance
        match spec.type:
            case LumpedSpec.Type.RESISTANCE:
                lumped_element = problem.Resistor(
                    a=terminal_a,
                    b=terminal_b,
                    resistance=spec.value
                )
            case LumpedSpec.Type.VOLTAGE:
                # Assuming endpoint_a is positive (p) and endpoint_b is negative (n)
                lumped_element = problem.VoltageSource(
                    p=terminal_a,
                    n=terminal_b,
                    voltage=spec.value
                )
            case LumpedSpec.Type.CURRENT:
                # Assuming current flows from endpoint_a (f) to endpoint_b (t)
                lumped_element = problem.CurrentSource(
                    f=terminal_a,
                    t=terminal_b,
                    current=spec.value
                )
            case _:
                # This case should ideally not be reached if parse_lumped_spec_directive is correct
                raise ValueError(f"Unhandled lumped element type: {spec.type}")

        lumpeds.append(lumped_element)

    # TODO: We need to do something similar but for through hole pads
    via_specs = extract_via_specs_from_pcb(board) + extract_tht_pad_specs_from_pcb(board)
    for via_spec in via_specs:
        # Get the layer names for the via
        # TODO: Also verify that the layer names in the via spec are in 
        # "matching order" with the stackup info
        layer_names = via_spec.layer_names
        if set(layer_names) != {"F.Cu", "B.Cu"}:
            raise NotImplementedError(f"Multi-layer vias ({layer_names}) are not yet supported")

        via_length = sum(si.thickness for si in stackup.items)

        # Create Terminal objects for the via connection points
        terminal_a = problem.Terminal(layer=layer_dict["F.Cu"], point=via_spec.point)
        terminal_b = problem.Terminal(layer=layer_dict["B.Cu"], point=via_spec.point)
        
        # Calculate resistance
        resistance = via_spec.compute_resistance(via_length)

        # Create Resistor object for the via
        via_resistor = problem.Resistor(
            a=terminal_a,
            b=terminal_b,
            resistance=resistance
        )

        lumpeds.append(via_resistor)

    # Get all layers as a list
    layers = list(layer_dict.values())
    
    # Return the Problem object
    return problem.Problem(layers=layers, lumpeds=lumpeds)
