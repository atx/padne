
import warnings
# This is to suppress pcbnew deprecation warning. Unfortunately the RPC API
# is not yet cooked enough for us
warnings.simplefilter("ignore", DeprecationWarning)

import enum
import pcbnew
import tempfile
import shapely
import pygerber.gerber.api
import pathlib

from dataclasses import dataclass
from pathlib import Path
from typing import Any

import padne.problem as problem

# This file is responsible for loading KiCad files and converting them to our
# internal representation. The idea is that we:
# 1. Load the KiCad file using the KiCad Python API.
# 2. Render it into Shapely objects.
# 3. This needs to include vertex information that

# Hmm, we need to like pick: either we render everything ourselves (fuck)
# or we use pygerber to extract the mesh from gerber files generated by
# KiCad. This has an issue that stuff like vias are not going to be modeled
# well. But, as a first approximation maybe good?
# We can always implement our own renderer later. Or we can start by patching the
# gerber-generated rendered files
# One of the main issues is that we do not have informations about pad center points
# But we can fairly easily compute them and have a lot of work done for us
# by using the gerber pathway


@dataclass(frozen=True)
class LumpedSpec:
    """
    This is what comes out of the eeschema parser (which does not yet exist)
    """

    class Type(enum.Enum):
        VOLTAGE = "VOLTAGE"
        CURRENT = "CURRENT"
        RESISTOR = "RESISTOR"

    @dataclass(frozen=True)
    class Endpoint:
        designator: str
        pad: str

    endpoint_a: Endpoint
    endpoint_b: Endpoint

    type: Type
    value: float


def parse_padne_eeschema_directive(directive: str) -> LumpedSpec:
    # Parse a directive like
    # !padne VOLTAGE 5V R1.1 R2.1
    # !padne RESISTOR 1k R1.1 R1.2
    # !padne CURRENT 1A R1.1 R2.1
    # Expected directive format:
    # "!padne <TYPE> <VALUE> <ENDPOINT_A> <ENDPOINT_B>"
    # Examples:
    #   "!padne VOLTAGE 5V R1.1 R2.1"
    #   "!padne RESISTOR 1k R1.1 R1.2"
    #   "!padne CURRENT 1A R1.1 R2.1"
    tokens = directive.split()
    if len(tokens) != 5:
        raise ValueError(f"Directive must have 5 tokens, got {len(tokens)}: {directive}")
    
    # tokens[0] is the literal "!padne"
    directive_type = tokens[1].upper()
    try:
        spec_type = LumpedSpec.Type(directive_type)
    except ValueError:
        raise ValueError(f"Unknown directive type: {directive_type}")
    
    raw_value = tokens[2]
    value = parse_value(raw_value)
    
    ep_a = parse_endpoint(tokens[3])
    ep_b = parse_endpoint(tokens[4])
    
    return LumpedSpec(endpoint_a=ep_a, endpoint_b=ep_b, type=spec_type, value=value)


def parse_value(value_str: str) -> float:
    """
    Parse a value string that may contain a unit suffix.
    For instance, "5V" becomes 5.0 and "1k" becomes 1000.0.
    """
    multiplier = 1.0
    lower_value = value_str.lower()
    if lower_value.endswith('k'):
        multiplier = 1e3
        value_str = value_str[:-1]
    elif lower_value.endswith('v') or lower_value.endswith('a'):
        value_str = value_str[:-1]
    
    return float(value_str) * multiplier


def parse_endpoint(token: str) -> LumpedSpec.Endpoint:
    """
    Parse an endpoint in the format DESIGNATOR.PAD.
    For example, "R1.1" will become Endpoint(designator="R1", pad="1").
    """
    parts = token.split(".")
    if len(parts) != 2:
        raise ValueError(f"Invalid endpoint format: {token}")
    return LumpedSpec.Endpoint(designator=parts[0], pad=parts[1])


def extract_lumped_from_eeschema(sch_file_path: pathlib.Path) -> list[LumpedSpec]:
    # TODO
    # This function should eat the eeschema file and produce, based on
    # either !padne directives or resistors (not in MVP) produce a list
    # of LumpedSpecs that later get injected into the final generation
    # of the Problem

    # First load the input schematic file
    with open(sch_file_path, "r") as f:
        import sexpdata
        sexpr = sexpdata.load(f)

    def find_text_elements(sexp_data):
        # Recurse to find all (text ...) elements in the sexp tree
        # This might be overkill, since I think they only live at the
        # top level
        if not isinstance(sexp_data, list):
            return []

        ret = []

        if len(sexp_data) > 0 and sexp_data[0] == sexpdata.Symbol("text"):
            ret.append(sexp_data)

        for item in sexp_data:
            ret.extend(find_text_elements(item))

        return ret

    def extract_content_from_text_element(text_element):
        assert isinstance(text_element, list)
        assert text_element[0] == sexpdata.Symbol("text")
        # This should probably always be the second element
        return text_element[1]

    all_texts = [
        extract_content_from_text_element(text_element)
        for text_element in find_text_elements(sexpr)
    ]

    directives = [
        text for text in all_texts
        if text.startswith("!padne")
    ]

    return directives


@dataclass(frozen=True)
class PlottedGerberLayer:
    name: str
    layer_id: int
    geometry: shapely.geometry.MultiPolygon


def render_gerbers_from_kicad(pcb_file_path: pathlib.Path) -> list[PlottedGerberLayer]:
    """
    Generate Gerber files from a KiCad PCB file and convert them to PlottedGerberLayer objects.
    
    Args:
        pcb_file_path: Path to the KiCad PCB file
        
    Returns:
        List of PlottedGerberLayer objects containing layer geometries
    """
    with tempfile.TemporaryDirectory() as tmpdir:
        board = pcbnew.LoadBoard(str(pcb_file_path))
        
        # Plot gerbers and get paths to generated files
        gerber_layers = plot_board_to_gerbers(board, Path(tmpdir))
        
        # Extract geometry from gerber files
        return extract_layers_from_gerbers(board, gerber_layers)


def plot_board_to_gerbers(board, output_dir: Path) -> dict[int, Path]:
    """
    Plot copper layers of a KiCad board to Gerber files.
    
    Args:
        board: KiCad board object
        output_dir: Directory where Gerber files will be saved
        
    Returns:
        Dictionary mapping layer IDs to paths of generated Gerber files
    """
    # Create plot controller and options
    plot_controller = pcbnew.PLOT_CONTROLLER(board)
    plot_options = plot_controller.GetPlotOptions()
    
    # Configure plot options for Gerber output
    plot_options.SetOutputDirectory(str(output_dir))
    plot_options.SetFormat(pcbnew.PLOT_FORMAT_GERBER)
    plot_options.SetUseGerberAttributes(True)
    plot_options.SetCreateGerberJobFile(False)
    #plot_options.SetExcludeEdgeLayer(False) # TODO: Figure this out
    plot_options.SetUseAuxOrigin(True)
    # TODO: This is a rather important choice - for now, we make no drill
    # shapes and later after we get via sim online, we need to include the drill shape
    # and handle the edge of each hole correctly
    plot_options.SetDrillMarksType(pcbnew.DRILL_MARKS_FULL_DRILL_SHAPE)
    
    # Set up layer list to plot
    gerber_layers = {}
    
    # Plot each copper layer
    for layer_id in range(pcbnew.PCB_LAYER_ID_COUNT):
        # Get layer name first
        layer_name = board.GetLayerName(layer_id)
        # Only process enabled layers that are copper layers (e.g. contain "Cu")
        if not board.IsLayerEnabled(layer_id) or "Cu" not in layer_name:
            continue
        
        # Open plot file
        plot_controller.SetLayer(layer_id)
        plot_controller.OpenPlotfile(layer_name, pcbnew.PLOT_FORMAT_GERBER, "")
        
        # Plot the layer
        assert plot_controller.PlotLayer(), f"Failed to plot layer {layer_name}"

        gerber_path = Path(plot_controller.GetPlotFileName())

        assert gerber_path.exists(), f"Gerber file {gerber_path} does not exist"

        gerber_layers[layer_id] = gerber_path

    # Close the plot
    plot_controller.ClosePlot()
    
    return gerber_layers


def extract_layers_from_gerbers(board, gerber_layers: dict[int, Path]) -> list[PlottedGerberLayer]:
    """
    Extract geometry from Gerber files and create PlottedGerberLayer objects.
    
    Args:
        board: KiCad board object (for layer names)
        gerber_layers: Dictionary mapping layer IDs to paths of Gerber files
        
    Returns:
        List of PlottedGerberLayer objects
    """
    plotted_layers = []
    
    for layer_id, gerber_path in gerber_layers.items():
        # Get layer name from the board
        layer_name = board.GetLayerName(layer_id)

        # Load gerber file and extract geometry
        gerber_data = pygerber.gerber.api.GerberFile.from_file(gerber_path)
        try:
            geometry = gerber_data.render_with_shapely()._result.shape
        except AssertionError:
            # This is a bug in pygerber, which gets triggered if the
            # gerber file is empty. We should fix this in pygerber ideally
            # TODO: Figure out if there is at least a way to check if the
            # gerber file is empty before we try to render it
            continue

        # Create a PlottedGerberLayer object
        plotted_layer = PlottedGerberLayer(
            name=layer_name,
            layer_id=layer_id,
            geometry=geometry
        )
        
        plotted_layers.append(plotted_layer)
    
    return plotted_layers


def load_kicad_project(pro_file_path: pathlib.Path) -> problem.Problem:
    # Load the project, figure out where the schematics live, the kicad pcb file lives
    # etc
    # MVP: We just manipulate the kicad_pcb file in order to get the geometries
    pass
